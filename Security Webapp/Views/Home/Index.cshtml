@{
    ViewData["Title"] = "Home Page";
}

@*  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or(at your option) any later version.
    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU General Public License for more details.
    You should have received a copy of the GNU General Public License along with this program.If not, see https://www.gnu.org/licenses. *@


<div class="text-center">
        <div class="text-under">
            <label for="dataToEncrypt">Add the data you want to encrypt and send to the database:</label>
            <textarea id="dataToEncrypt" name="EncryptedData" rows="4"></textarea>
            <button type="button" id="encryptButton">Send</button>
        </div>

        <div class="text-under">
            <label for="dataId">Enter the ID of the data you want to retrieve:</label>
            <input type="text" id="dataId" name="id" />
            <button type="button" id="decryptButton">Get Data Back</button>
            <label for="decryptedData">Decrypted Data:</label>
            <textarea id="decryptedData" name="decryptedData" rows="4" readonly>@ViewBag.DecryptedData</textarea>
        </div>
</div>


<script>
    // Hardcoded key and IV
    let key = new TextEncoder().encode("RUNEMAXSOULAIMAN").buffer;
    let iv = new TextEncoder().encode("SOULAIMANMAXRUNE").buffer;

    // Function to encrypt data
    async function encryptData(data) {
        const cryptoKey = await window.crypto.subtle.importKey('raw', key, 'AES-GCM', false, ['encrypt']);
        const encodedData = new TextEncoder().encode(data);
        const encryptedData = await window.crypto.subtle.encrypt({ name: 'AES-GCM', iv: iv }, cryptoKey, encodedData);
        return new Uint8Array(encryptedData);
    }

    // Function to decrypt data
    async function decryptData(encryptedData) {
        const cryptoKey = await window.crypto.subtle.importKey('raw', key, 'AES-GCM', false, ['decrypt']);
        const decryptedData = await window.crypto.subtle.decrypt({ name: 'AES-GCM', iv: iv }, cryptoKey, encryptedData);
        return new TextDecoder().decode(new Uint8Array(decryptedData));
    }

    // Event listener for the encrypt button
    document.getElementById('encryptButton').addEventListener('click', async () => {
        const data = document.getElementById('dataToEncrypt').value;
        const encryptedData = await encryptData(data);

        // Convert the encrypted data to a base64 string
        const base64Data = btoa(String.fromCharCode.apply(null, encryptedData));

        // Post the encrypted data to the server
        const response = await fetch('@Url.Action("EncryptAndSave", "Home")', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ EncryptedData: base64Data })
        });

        if (!response.ok) {
            console.error('Error encrypting data:', response.statusText);
        }
    });

    // Event listener for the decrypt button
    document.getElementById('decryptButton').addEventListener('click', async () => {
        const id = document.getElementById('dataId').value;
        
        // Get the encrypted data from the server
        const response = await fetch('@Url.Action("GetAndDecryptData", "Home")' + '?id=' + id);
        const data = await response.json();


        // Convert the base64 string back to a byte array
        const encryptedData = new Uint8Array(atob(data.encryptedData).split('').map(c => c.charCodeAt(0)));
        const decryptedData = await decryptData(encryptedData.buffer);
        document.getElementById('decryptedData').value = decryptedData;
    });
</script>

